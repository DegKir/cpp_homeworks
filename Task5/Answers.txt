1.На чём основано объекто ореинтированное программирование ?
	Главная идея ООП заклюается в существовании классов и объектов этих классов.
	При этом объект класса имеет внутреннюю логику, это уже не просто скомпанованный набор
	данных. 
	При этом выделяют основные принципы ООП:
	1.Инкапсуляция - принцип, определяющий то как пользователь должен взаимодействовать
	с классом. Класс должен представлять собой чёрную коробку, пользователь не обязан знать
	что находится внутри класса, чтобы в полной мере использовать его функционал. Так же
	эта концепция говорит о том что класс должен подразделяться на интерфейс - ту часть
	класса с которой пользователь может непосредственно взаимодействовать, и на 
	приватные данные класса, пользоваться которыми в общем случае может он сам.
	2.Наследование - принцип, позволяющий описать новый класс на основе уже существующего.
	3.Полиморфизм - прицнпи, определяющий возможность объектов с одинаковой спецификацией
	иметь различную реализацию. "Один интерфейс, множество реализаций". Пример полиморфизма
	обычная перегрузка функций.
	4.Абстракция данных. Идея абстракции данных состоит в том, что способ использования
	составных объектов данных должен отделяться от деталей их реализации в виде
	более простых объектов.

2.Какие аспекты следует учитывать при реализации классов ?
	Права доступа. Необходимо чтобы поля и методы класса разделялись на приватные и публичные.
	Таким образом можно всегда чётко контролировать, каким именно образом будет
	осуществлено взаимодействие с ними. Так намного меньше вероятность ошибок
	в работе программы и их намного удобнее отлавливать.

3.Почему удобно разделять классы на интерфейс и реализацию ?
	Потому что таким образом пользователю библиотеки включающей этот класс не нужно будет
	знать, что находится внутри класса. Класс, его поля и методы представляют собой
	концепцию "чёрной коробки", в которой находится реализация сокрытая от глаз пользователя
	и в которую посредством интерфейса происходит загрузка/выгрузка данных. 
 
4.Чем отличается внутренне и внешнее связывание ?
	К сущности, имеющей внутренне связывание можно обратить только из той еденицы
	трансляции, где она была определена. (прим. static ......)
	К сущености, имеющей внешнее связывание можно обратиться из еденицы трансляции,
	отличной от той, где она была определена. (прим exter ......)

5.Каким особенностями обладают именованные пространства имён ?
	Если та или иная сущность была определена в именованном пространстве 
	имён (namespace vasya), то чтобы обратиться к ней будет необходимо
	использовать специальный синтаксис (vasya::). 
	Это необходимо чтобы уменьшить вероятность ошибки, когда одинаковое имя
	присваивают разным сущностям. (Пример - программисты работающие над
	большим проектом имеют свои неймспейсы, чтобы случайно не создать одинаковые
	по названию функции и не сломать всё)
	к ней обратить из другого пространства имён, необходимо использовать
