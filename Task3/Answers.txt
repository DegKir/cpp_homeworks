1.В чём заключается концепция встраивания вызовов функций и лямбда выражений ?
    Во время классического вызова функции на сам вызов тратится много ресурсов:
    Адрес возврата и аргументы нужны положить в стековый фрейм, затем их нужно
    извлечь при переходе в функцию, затем обратная процедура выхода из функции.
    Компилятор может в случаях, когда это выгодно с точки зрения ресурсов, 
    вставлять тело функции прямо в рабочий код, что делает вызов функций в си++ дешёвым.
 
2.Какие аргументы могут иметь значения по умолчанию 
    Те, которые находятся в нужном порядке при вызове функции
    (все параметры по умолчанию должны быть справа)
    Те которые не вызывают конфликтов вызова перегруженных функций
    (если две функции принимают одинаковый аргумент, но вторая
    так же принимает аргумент с значением по умолчанию, то при
    вызове первой функции компилятор выдаст ошибку о неопределённости.

3.На основании чего разрешается выбор перегруженной функции
    На основании типов аргументов функции и, в неопределённых случаях,
    того как компилятор будет осуществлять неявное приведение типов.

4.Как обеспечить состояние в функциях и лямбда-выражениях
    При помощи слова static. Если переменную в функции или лямбда выражении
    объявить или инициализировать с ключевым словом static, то
    её значение будет сохраняться между различными вызовами функции.

5.По каким причина макросы считаются опасным инструементом
    Макрос НЕ ДУМАЯ замещает код, тем самым можно сломать очень много
    ключевых слов. При этом компилятор и IDE могут даже не выдавать
    нормальной ошибки и поэтому проблему будет очень трудно отловить.

