1.Перечислите все специальные функции-члены класса, включая перемещающие операции.
		конструктор по умолчанию, деструктор, конструктор копирования , оператор копирования , конструктор перемещения, оператор перемещения

2.Приведите примеры операторов которые можно, нельзя и не рекомендуется перегружать
	Примеры когда можно перегружать : арифметические операции, операцию взятия указателя и ссылки
	Примеры когда нельзя перегружать :  операцию обращения к полю класса(.), операцию обращения через пространство имён(::), тернарный оператор(?:)
	Не рекомендуется перегружать операцию взятия rvalue ссылки(&&)

3. каких преобразованиях следует помнить при проектировании операторов ?
	О неявных преобразованиях типа. В лёгком случае они могут понижать оточность вычислений.  В тяжёлых посредством, например, целочисленного переполнения лишать арифметику всякого смысла. Туда же относятся операции с различными int-ами. Например умножение unsigned int на int.
	Так же в зависимости от того, что меняет оператор внутри класса, он может быть методом класса, может быть его другом, а может осуществлять взаимодействие с классом посредством геттеров и сеттеров.

4.Опишите классификацию выражений на основе перемещаемости и идентефицируемости
	Идентефицируемы glvalue, перемещаемы rvalue. Из этих двух свойств определены 3 типа выражений
	lvalue - идентефицируемые и не перемещаемые
	xvalue - идентефицируемые и перемещаемые
	prvalue - неидентефицируемы и перемещаемые

5.Зачем нужны rvalue ссылки ?
	Можно перегружать функции и операторы для rvalue выражений.
	Используются для сементатики перемещения.

6.Почему сементатика перемещения лучше копирования ?
	Для копирования выделяются лишние ресурсы. Для того, чтобы обменять две переменные значениями посредством копирования необходимо создать третью tmp, что тратит ресурсы.
	Сементатика перемещения безопаснее копирования. Тогда как копирование передаёт данные, перемещение даёт право собственности на эти данные. Таким образом при копировании может возникнуть ситуация, когда при вызове деструктора изначального объекта будет задёт результат копирования.

7.Что делает функция std::move и когда нет необходимости явно её вызывать?
	std::move это способ явно сконвертировать передаваемый аргумент в rvalue выражение. В случаях, когда синтаксис или реализация требуют использования rvalue, но мы работаем с lvalue, нам необходимо использовать эту функцию. Например при сементатике перемещения.
	Данную функцию, например, не обязательно использовать при реализации возврата объекта из функции посредством сементатики перемещения. В силу того что время жизни локальной переменной подходит к концу омпилятор сам "поймёт", что надо вызывать оператор перемещения, без явного преобразования переменной к rvalue выражению.

8.Кем выполняется непосредственная работа по перемещению?
	Оператором перемещения.

9.Когда может потребоваться пользовательская реализация специальных функций-членов класса ?
	Например, когда мы работаем с ручным выделением памяти и нам противопоказано поверхностное копирование. Тогда для реализации глубокого копирования приходится писать специальные функции-члены класса. В этом же случае нам нужен деструктор - посредством его удобно освобождать память.

10.Для чего нужны ключевые слова default и delete в объявлении специальных функий-членов класса.
	default необходимо указывать чтобы явно показать что в программе мыбудем использовать специальную функцию, созданную компилятором по умолчанию. Если мы пишем delete то мы вежливо просим компилятор не создавать такую специальную функцию самостоятельно - мы просто хотим чтобы её не было.

