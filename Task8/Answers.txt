1.Какие существуют способы обработки различных ошибок ?
    Коды возврата - функция возвращает специфическое значение ( или просто true/false ).
    При помощи операторов throw,try,catch - механизм исключений.

2.В чем заключаются недостатки механизмов кода возврата ?
    Нельзя разделить место появления ошибки и место реакции на неё.
    Требуется проверять каждую функцию по отдельности, что нагромождает код.
    О факте совершении ошибки верхний блок программы узнаёт только по завершении работы функции, 
    из-за чего иногда может быть невозможно "оперативно" реагировать на возникшие проблемы.
    Приходится замусоривать сигнатуру функции.
    В целом не красивое решение.

3.Какими особенностями обладает механизм исключений ?
    Иерархия классов исключений позволяет более гибко регистрировать и выдавать ошибки.
    Можно разделить место появления ошибки и место реакции - исключение можно без проблем
    передать на несколько блоков вверх.

    В случае возникновения ошибок в блоке try сразу же бросает исключение. 
    Это приводит к проблеме очистки выделенных ресурсов после генерации ошибки : например, если в блоке,
    включающем открытие и закрытие файла, выскочит ошибка, то код не дойдёт до закрытия файла.
    Подобного рода эксцессы могут вызывать утечки в памяти.

4.Что такое паттерны проектирования, какова их классификация ?
    Однажды программисты собрались и сделалы энциклопедию хороших и правильных решений
    распространённых и часто возникаемых задач. Таким образом рядовому программисту не
    приходится изобретать велосипед, нужно только привести данную ему задачу к существующим паттернам.
    Паттерны делят на три кучки:
        Порождающие - создание новых объектов
        Структурные - поддержка иерархий классов
        Поведенческие - взаимодействие между объектами

5.Как формулируются гарантии безопасности исключений ?
    Базовые гарантии
        Инвариант класса должен оставаться инвариантом класса.
        Никаких утечек памяти не должно происходит
    Строгие гарантии
        Исключения не должны оказывать влияния на работу программы.
        Транзакционное поведение - способность автоматически откатывать систему
            к состоянию до блока с ошибкой. 
    Отсутствие исключений
        Никаких исключений в программме возникать вообще не должно.
            пример-функция swap.